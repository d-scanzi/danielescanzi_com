import numpy as np
import copy
from matplotlib import pyplot as plt
## Create signal
sampling_rate_hz    = 1000
signal_duration_s   = 1
signal_frequency_hz = 12
signal_amplitude_au = 3
sampling_period     = 1/sampling_rate_hz
time_samples        = np.arange(0, signal_duration_s, sampling_period)
oscillatory_signal  = signal_amplitude_au * np.cos(2*np.pi*time_samples)
oscillatory_signal_with_edge = copy.copy(oscillatory_signal)
oscillatory_signal_with_edge[500] = 0
import numpy as np
import copy
from matplotlib import pyplot as plt
## Create signal
sampling_rate_hz    = 1000
signal_duration_s   = 1
signal_frequency_hz = 12
signal_amplitude_au = 3
sampling_period     = 1/sampling_rate_hz
time_samples        = np.arange(0, signal_duration_s, sampling_period)
oscillatory_signal  = signal_amplitude_au * np.cos(2*np.pi*time_samples)
oscillatory_signal_with_edge = copy.copy(oscillatory_signal)
oscillatory_signal_with_edge[500] = 0
fig, ax = plt.subplots()
ax.plot(time_samples, oscillatory_signal_woth_edges)
import numpy as np
import copy
from matplotlib import pyplot as plt
## Create signal
sampling_rate_hz    = 1000
signal_duration_s   = 1
signal_frequency_hz = 12
signal_amplitude_au = 3
sampling_period     = 1/sampling_rate_hz
time_samples        = np.arange(0, signal_duration_s, sampling_period)
oscillatory_signal  = signal_amplitude_au * np.cos(2*np.pi*time_samples)
oscillatory_signal_with_edge = copy.copy(oscillatory_signal)
oscillatory_signal_with_edge[500] = 0
fig, ax = plt.subplots()
ax.plot(time_samples, oscillatory_signal_with_edges)
import numpy as np
import copy
from matplotlib import pyplot as plt
## Create signal
sampling_rate_hz    = 1000
signal_duration_s   = 1
signal_frequency_hz = 12
signal_amplitude_au = 3
sampling_period     = 1/sampling_rate_hz
time_samples        = np.arange(0, signal_duration_s, sampling_period)
oscillatory_signal  = signal_amplitude_au * np.cos(2*np.pi*time_samples)
oscillatory_signal_with_edge = copy.copy(oscillatory_signal)
oscillatory_signal_with_edge[500] = 0
fig, ax = plt.subplots()
ax.plot(time_samples, oscillatory_signal_with_edge)
import numpy as np
import copy
from matplotlib import pyplot as plt
## Create signal
sampling_rate_hz    = 1000
signal_duration_s   = 1
signal_frequency_hz = 12
signal_amplitude_au = 3
sampling_period     = 1/sampling_rate_hz
time_samples        = np.arange(0, signal_duration_s, sampling_period)
oscillatory_signal  = signal_amplitude_au * np.cos(2*np.pi*time_samples)
oscillatory_signal_with_edge = copy.copy(oscillatory_signal)
oscillatory_signal_with_edge[500] = 0
fig, ax = plt.subplots()
ax.plot(time_samples, oscillatory_signal_with_edge)
plt.show()
length_signal = len(time_samples)
oscillatory_signal_with_edge_coefficients        = fft(oscillatory_signal_with_edge)
oscillatory_signal_with_edge_frequency_amplitude = np.abs(oscillatory_signal_with_edge_coefficients[0:length_signal//2])
import numpy as np
import copy
from scipy.fft import fft, fftfreq
from matplotlib import pyplot as plt
## Create signal
sampling_rate_hz    = 1000
signal_duration_s   = 1
signal_frequency_hz = 12
signal_amplitude_au = 3
sampling_period     = 1/sampling_rate_hz
time_samples        = np.arange(0, signal_duration_s, sampling_period)
oscillatory_signal  = signal_amplitude_au * np.cos(2*np.pi*signal_frequency_hz*time_samples)
oscillatory_signal_with_edge = copy.copy(oscillatory_signal)
oscillatory_signal_with_edge[500] = 0
fig, axs = plt.subplots(2,1)
axs[0].plot(time_samples, oscillatory_signal, color="purple")
axs[1].plot(time_samples, oscillatory_signal_with_edge, color="teal")
for ax in axs:
ax.set_xlabel("Samples")
ax.set_ylabel("Amplitude")
fig.tight_layout()
length_signal = len(time_samples)
oscillatory_signal_with_edge_coefficients        = fft(oscillatory_signal_with_edge)
oscillatory_signal_with_edge_frequency_amplitude = np.abs(oscillatory_signal_with_edge_coefficients[0:length_signal//2])
import numpy as np
import copy
from scipy.fft import fft, fftfreq
from matplotlib import pyplot as plt
## Create signal
sampling_rate_hz    = 1000
signal_duration_s   = 1
signal_frequency_hz = 12
signal_amplitude_au = 3
sampling_period     = 1/sampling_rate_hz
time_samples        = np.arange(0, signal_duration_s, sampling_period)
oscillatory_signal  = np.zeros(1000)
oscillatory_signal_with_edge = copy.copy(oscillatory_signal)
oscillatory_signal_with_edge[500] = 3
fig, axs = plt.subplots(2,1)
axs[0].plot(time_samples, oscillatory_signal, color="purple")
axs[1].plot(time_samples, oscillatory_signal_with_edge, color="teal")
for ax in axs:
ax.set_xlabel("Samples")
ax.set_ylabel("Amplitude")
fig.tight_layout()
4.881e13
4.8881e13
4.81e13
4.81e-13
4.81e-13 / 1.81e-13
log(2)
