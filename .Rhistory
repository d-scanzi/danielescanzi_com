traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
print(distance_matrix)
}
}
min(25, Inf, Inf)
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
print(distance_matrix)
}
}
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
print(current_distance)
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
# Step 1 - Initialise distance matrix
distance_matrix <- matrix(rep(0, (length(template) + 1) * (length(query) + 1)) ,nrow = length(template) + 1, ncol = length(query) + 1)
# Step 2 - Set first row and col to +inf
distance_matrix[1, ] <- +Inf
distance_matrix[, 1] <- +Inf
# Step 3 - Set first value to 0
distance_matrix[1,1] <- 0
# Create a matrix to store warps
traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_argument)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_argument)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
# Step 1 - Initialise distance matrix
distance_matrix <- matrix(rep(0, (length(template) + 1) * (length(query) + 1)) ,nrow = length(template) + 1, ncol = length(query) + 1)
# Step 2 - Set first row and col to +inf
distance_matrix[1, ] <- +Inf
distance_matrix[, 1] <- +Inf
# Step 3 - Set first value to 0
distance_matrix[1,1] <- 0
# Step 4 - Start iterations
# Create a matrix to store warps
traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
View(distance_matrix)
dista
distance_matrix[2,2]
distance_matrix[2+1,2+1]
distance_matrix[2-1,2-1]
distance_matrix[3-1,2-1]
distance_matrix[4-1,2-1]
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_argument)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
# Create template and query signals
template <- c(0, 0, 1, 3, 5, 4, 3, -1, -2, -2, -2, -6, -3, 1, 2, 1, 0)
query    <- c(0, 2, 4, 1, 0, 0, -3, -6, -2, 0, 1, 3, 2, 1)
# --- DTW --- #
# Step 1 - Initialise distance matrix
distance_matrix <- matrix(rep(0, (length(template) + 1) * (length(query) + 1)) ,nrow = length(template) + 1, ncol = length(query) + 1)
# Step 2 - Set first row and col to +inf
distance_matrix[1, ] <- +Inf
distance_matrix[, 1] <- +Inf
# Step 3 - Set first value to 0
distance_matrix[1,1] <- 0
# Step 4 - Start iterations
# Create a matrix to store warps
traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_arguments)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
# Step 1 - Initialise distance matrix
distance_matrix <- matrix(rep(0, (length(template) + 1) * (length(query) + 1)) ,nrow = length(template) + 1, ncol = length(query) + 1)
# Step 2 - Set first row and col to +inf
distance_matrix[1, ] <- +Inf
distance_matrix[, 1] <- +Inf
# Step 3 - Set first value to 0
distance_matrix[1,1] <- 0
# Step 4 - Start iterations
# Create a matrix to store warps
traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
distance_matrix[2-1, 15]
View(distance_matrix)
View(traceback_matrix)
View(distance_matrix)
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i] - query[j])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_arguments)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
ncol(distance_matrix)
for (i in 2:ncol(distance_matrix)) {print(i)}
# Step 1 - Initialise distance matrix
distance_matrix <- matrix(rep(0, (length(template) + 1) * (length(query) + 1)) ,nrow = length(template) + 1, ncol = length(query) + 1)
# Step 2 - Set first row and col to +inf
distance_matrix[1, ] <- +Inf
distance_matrix[, 1] <- +Inf
# Step 3 - Set first value to 0
distance_matrix[1,1] <- 0
# Step 4 - Start iterations
# Create a matrix to store warps
traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i-1] - query[j-1])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_arguments)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
View(traceback_matrix)
# Remove infinities
distance_matrix <- distance_matrix[2:nrow(distance_matrix), 2:ncol(distance_matrix)]
# Recontruct path
i <- nrow(traceback_matrix)
j <- ncol(traceback_matrix)
path <- data.frame("i" = i, "y" = y)
path <- data.frame("i" = i, "y" = j)
View(path)
rbind(path, c(0,0))
while (i > 1 or j > 1) {
while (i > 1 | j > 1) {
warp_type <- traceback_matrix[i, j]
# If it was a match
if (warp_type == 1) {
i <- i - 1
j <- j - 1
# If it was an insertion
} else if {
while (i > 1 | j > 1) {
warp_type <- traceback_matrix[i, j]
# If it was a match
if (warp_type == 1) {
i <- i - 1
j <- j - 1
# If it was an insertion
} else if (warp_type == 2) {
i <- i - 1
# If it was a deletion
} else {
j <- j - 1
}
path <- rbind(path, c(i,j))
}
# Recontruct path
i <- nrow(traceback_matrix)
j <- ncol(traceback_matrix)
path <- data.frame("i" = i, "y" = j)
while (i > 1 | j > 1) {
warp_type <- traceback_matrix[i, j]
print(warp_type)
# If it was a match
if (warp_type == 1) {
i <- i - 1
j <- j - 1
# If it was an insertion
} else if (warp_type == 2) {
i <- i - 1
# If it was a deletion
} else {
j <- j - 1
}
path <- rbind(path, c(i,j))
}
# Recontruct path
i <- nrow(traceback_matrix)
j <- ncol(traceback_matrix)
path <- data.frame("i" = i, "y" = j)
while (i > 1 | j > 1) {
warp_type <- traceback_matrix[i, j]
print(warp_type)
# If it was a match
if (warp_type == 1) {
i <- i - 1
j <- j - 1
# If it was an insertion
} else if (warp_type == 2) {
i <- i - 1
# If it was a deletion
} else if (warp_type == 3) {
j <- j - 1
}
path <- rbind(path, c(i,j))
}
# Step 1 - Initialise distance matrix
distance_matrix <- matrix(rep(0, (length(template) + 1) * (length(query) + 1)) ,nrow = length(template) + 1, ncol = length(query) + 1)
# Step 2 - Set first row and col to +inf
distance_matrix[1, ] <- +Inf
distance_matrix[, 1] <- +Inf
# Step 3 - Set first value to 0
distance_matrix[1,1] <- 0
# Create a matrix to store warps
traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i-1] - query[j-1])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_arguments)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
# Recontruct path
i <- nrow(traceback_matrix)
j <- ncol(traceback_matrix)
path <- data.frame("i" = i, "y" = j)
while (i > 1 | j > 1) {
warp_type <- traceback_matrix[i, j]
print(warp_type)
# If it was a match
if (warp_type == 1) {
i <- i - 1
j <- j - 1
# If it was an insertion
} else if (warp_type == 2) {
i <- i - 1
# If it was a deletion
} else if (warp_type == 3) {
j <- j - 1
}
path <- rbind(path, c(i,j))
}
# Step 1 - Initialise distance matrix
distance_matrix <- matrix(rep(0, (length(template) + 1) * (length(query) + 1)) ,nrow = length(template) + 1, ncol = length(query) + 1)
# Step 2 - Set first row and col to +inf
distance_matrix[1, ] <- +Inf
distance_matrix[, 1] <- +Inf
# Step 3 - Set first value to 0
distance_matrix[1,1] <- 0
# Step 4 - Start iterations
# Create a matrix to store warps
traceback_matrix <- matrix(rep(0, length(template) * length(query)), nrow = length(template))
# Iterate across rows
for (i in 2:nrow(distance_matrix)) {
# Iterate across rows
for (j in 2:ncol(distance_matrix)) {
# Compute distance between current points
current_distance <- abs(template[i-1] - query[j-1])
# Compute match/insertion/deletion - take minimum
warp_arguments <- c(
distance_matrix[i-1, j-1], #Match     [1]
distance_matrix[i  , j-1], #Insertion [2]
distance_matrix[i-1, j  ]  #Deletion  [3]
)
print(warp_arguments)
# Set new value in distance matrix
distance_matrix[i, j] <- current_distance + min(warp_arguments)
# Store the warp step
traceback_matrix[i-1,j-1] <- which.min(warp_arguments)
}
}
# Remove infinities
distance_matrix <- distance_matrix[2:nrow(distance_matrix), 2:ncol(distance_matrix)]
# Recontruct path
i <- nrow(traceback_matrix)
j <- ncol(traceback_matrix)
path <- data.frame("i" = i, "y" = j)
while (i > 1 | j > 1) {
warp_type <- traceback_matrix[i, j]
print(warp_type)
# If it was a match
if (warp_type == 1) {
i <- i - 1
j <- j - 1
# If it was an insertion
} else if (warp_type == 2) {
j <- j - 1
# If it was a deletion
} else if (warp_type == 3) {
i <- i - 1
}
path <- rbind(path, c(i,j))
}
View(path)
library(ggplot2)
sinusoid <- sin(2*pi*2*seq(1, 10, by = 0.1))
library(ggplot2)
sinusoid <- sin(2*pi*2*seq(1, 10, by = 0.01))
library(ggplot2)
sinusoid <- sin(2*pi*2*seq(1, 10, by = 0.001))
library(ggplot2)
sinewave <- data.frame(
samples = seq(1, 10, by = 0.001),
sinusoid = sin(2*pi*2*samples)
)
library(ggplot2)
sinewave <- data.frame(
"samples" = seq(1, 10, by = 0.001),
"sinusoid" = sin(2*pi*2*samples)
)
library(ggplot2)
sinewave <- data.frame(
"samples" = seq(1, 10, by = 0.001),
"sinusoid" = sin(2*pi*2*samples)
)
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line() +
theme_minimal()
library(tidyverse)
samples  <- seq(1, 10, by = 0.001)
sinusoid <- sin(2*pi*2*samples)
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line() +
theme_minimal()
library(tidyverse)
samples  <- seq(1, 10, by = 0.001)
sinusoid <- sin(2*pi*1*samples)
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line() +
theme_minimal()
library(tidyverse)
samples  <- seq(1, 10, by = 0.001)
sinusoid <- sin(2*pi*1*samples)
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line(size = 2) +
theme_minimal()
library(tidyverse)
samples  <- seq(1, 10, by = 0.001)
sinusoid <- sin(2*pi*1*samples)
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line(size = 1.5) +
theme_minimal()
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line(size = 1.5) +
scale_colour_gradient(low = "black", high = "white") +
theme_minimal()
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line(size = 1.5) +
scale_fill_gradient(low = "black", high = "white") +
theme_minimal()
data.frame(x = samples, y = sinusoid, colour = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line(size = 1.5) +
scale_fill_gradient(low = "black", high = "white") +
theme_minimal()
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y, colour = sinusoid)) +
geom_line(size = 1.5) +
scale_fill_gradient(low = "black", high = "white") +
theme_minimal()
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y, colour = sinusoid)) +
geom_smooth(size = 1.5) +
scale_fill_gradient(low = "black", high = "white") +
theme_minimal()
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y, colour = sinusoid)) +
geom_line(size = 1.5) +
scale_fill_gradient(low = "black", high = "white") +
theme_minimal()
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y, colour = sinusoid)) +
geom_line(size = 1.5) +
scale_colour_gradient(low = "black", high = "white") +
theme_minimal()
library(tidyverse)
samples  <- seq(1, 10, by = 0.0001)
sinusoid <- sin(2*pi*1*samples)
simple_sine <- data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y)) +
geom_line(size = 1.5) +
theme_minimal()
data.frame(x = samples, y = sinusoid) %>%
ggplot(aes(x=x, y=y, colour = sinusoid)) +
geom_line(size = 1.5) +
scale_colour_gradient(low = "black", high = "white") +
theme_minimal()
