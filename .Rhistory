filter(question == questions[5]) %>%
separate(answer, 'word1', 'word2', 'word3')
descriptors <- raw_feedback %>%
filter(question == questions[5]) %>%
separate(answers, 'word1', 'word2', 'word3')
descriptors <- raw_feedback %>%
filter(question == questions[5]) %>%
separate(answers, c('word1', 'word2', 'word3'))
descriptors <- raw_feedback %>%
filter(question == questions[5]) %>%
separate(answers, c('word1', 'word2', 'word3'), fill='right')
View(descriptors)
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
# Below - Above - Average
marks_1 <- raw_feedback %>%
filter(question == questions[1]) %>%
mutate(as_score = case_when(answers == 'Below average' ~ -1,
answers == 'Average' ~ 0,
answers == 'Above average' ~ 1),
rand_idx = as.factor(sample(1:10000, size=n())))
marks_plot <- marks_1 %>%
ggplot(aes(x=as_score, y = rand_idx, color = answers)) +
geom_jitter(width = 0.4,
shape = 1,
size  = 3,
stroke = 3,
alpha = 0.75,
show.legend = F) +
geom_vline(xintercept = c(-1.5, -0.5, 0.5, 1.5)) +
coord_cartesian(xlim = c(-1.5, 1.5)) +
scale_x_continuous(breaks = -1:1,
labels = c('Below average', 'Average', 'Above Average')) +
scale_colour_manual(values = c('Below average' ='#44aa99' ,
'Average'       = '#ddcc77',
'Above average' = '#882255')) +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title  = element_blank(),
panel.grid  = element_blank(),
panel.background = element_rect(fill='transparent', color=NA),
plot.background  = element_rect(fill='transparent', color=NA),
axis.text.x=element_text(colour="white", size=18)
)
#| echo: false
#| message: false
#| warning: false
marks_plot
#| echo: false
#| message: false
#| warning: false
marks_2 <- raw_feedback %>%
filter(question == questions[2]) %>%
mutate(total_answers = n(),
answers = factor(answers, levels = c('A+', 'A', 'A-', 'B+', 'B','B-'))) %>%
group_by(answers, total_answers) %>%
summarise(count = n()) %>%
mutate(x_value = case_when(answers == 'A+' ~ 0,
answers == 'A'  ~ 5,
answers == 'A-' ~ 10,
answers == 'B+' ~ 15,
answers == 'B'  ~ 20),
y_value = 0,
proportion = (count / total_answers)*100)
grade_plot <- marks_2 %>%
ggplot(aes(x=x_value, y=y_value)) +
geom_text(aes(label=answers, size = proportion),
colour = 'white',
show.legend = F) +
scale_size(range = c(8, 24), guide = F) +
coord_cartesian(xlim = c(-1, 21)) +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title  = element_blank(),
panel.grid  = element_blank(),
panel.background = element_rect(fill='transparent', color=NA),
plot.background  = element_rect(fill='transparent', color=NA))
#| echo: false
#| message: false
#| warning: false
grade_plot
questions
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
separate(answers, c('word1', 'word2', 'word3'), fill='right')
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9])
View(descriptors)
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
drop_na()
View(descriptors)
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
drop_na()
View(descriptors)
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
drop_na() %>%
mutate(answers = tolower(answers))
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers),
answers = case_when(answers == 'n/a' ~ NA))
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers),
answers = case_when(answers == 'n/a' ~ NA)) %>%
drop_na()
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers),
answers = case_when(answers == 'n/a' ~ NA,
TRUE ~ answers)) %>%
drop_na()
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers),
answers = case_when(answers == 'n/a' ~ NA,
.default ~ answers)) %>%
drop_na()
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na()
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na()
View(descriptors)
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summary(n = n())
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na()
View(descriptors)
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summary(n = n())
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers)
View(descriptors)
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summarise(tot = n())
View(descriptors)
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summarise(tot = n())
View(descriptors)
devtools::install_github("lchiffon/wordcloud2")
library(wordcloud2)
?rename
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summarise(freq = n()) %>%
rename(word = answers)
wordcloud2(descriptors, color = "random-light", backgroundColor = "grey")
?wordcloud
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2)
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea')
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea', color = 'random-dark')
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea', color = 'random-light')
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea')
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea')
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea')
questions
appreciation <- raw_feedback %>%
filter(question == questions[3])
View(appreciation)
appreciation <- raw_feedback %>%
filter(question == questions[3]) %>%
select(answers) %>%
drop_na()
appreciation <- raw_feedback %>%
filter(question == questions[3]) %>%
select(answers) %>%
drop_na()
appreciation
appreciation <- raw_feedback %>%
filter(question == questions[3]) %>%
select(answers) %>%
rename(Feedback = answers) %>%
drop_na()
appreciation
install.packages("kableExtra")
library(kableExtra)
kbl(appreciation)
?column_spec
?column_spec
?kableExtra::column_spec
kbl(appreciation) %>%
kable_material(c("hover")) %>%
scroll_box(width = "100%", height = "400px") %>%
kableExtra::column_spec(width = "10em")
kbl(appreciation) %>%
kable_material(c("hover")) %>%
scroll_box(width = "100%", height = "400px") %>%
kableExtra::column_spec(1, width = "10em")
kbl(appreciation) %>%
kable_material(c("hover")) %>%
scroll_box(width = "100%", height = "400px") %>%
kableExtra::column_spec(1, width = "30em")
kbl(appreciation) %>%
kable_material(c("hover")) %>%
kableExtra::column_spec(1, width = "30em")
kbl(appreciation) %>%
kable_material(c("hover")) %>%
kableExtra::column_spec(1, width = "30em") %>%
scroll_box(width = "100%", height = "400px")
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud2)
library(kableExtra)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
questions
improve <- raw_feedback %>%
filter(question == questions)
View(improve)
improve <- raw_feedback %>%
filter(question == questions[4])
View(raw_feedback)
improve <- raw_feedback %>%
filter(question == questions[4]) %>%
select(answers) %>%
drop_na()
View(improve)
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud2)
library(kableExtra)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
#| echo: false
#| message: false
#| warning: false
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summarise(freq = n()) %>%
rename(word = answers)
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea')
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud2)
library(kableExtra)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
#| echo: false
#| message: false
#| warning: false
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summarise(freq = n()) %>%
rename(word = answers)
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea')
#| echo: false
#| output: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(here)
library(wordcloud2)
library(kableExtra)
# Load data and set it up appropriately
raw_feedback <- read_csv(here('educating','data', 'feedback_collected.csv'))
questions    <- colnames(raw_feedback)
raw_feedback <- raw_feedback %>%
pivot_longer(cols = everything(),
names_to = 'question',
values_to = 'answers')
#| echo: false
#| message: false
#| warning: false
descriptors <- raw_feedback %>%
filter(question %in% questions[5:9]) %>%
mutate(answers = tolower(answers)) %>%
drop_na() %>%
group_by(answers) %>%
summarise(freq = n()) %>%
rename(word = answers)
wordcloud2(descriptors, minRotation = -pi/2, maxRotation = -pi/2, backgroundColor = '#f8f4ea')
#| echo: false
#| message: false
#| warning: false
# Below - Above - Average
marks_1 <- raw_feedback %>%
filter(question == questions[1]) %>%
mutate(as_score = case_when(answers == 'Below average' ~ -1,
answers == 'Average' ~ 0,
answers == 'Above average' ~ 1),
rand_idx = as.factor(sample(1:10000, size=n())))
marks_plot <- marks_1 %>%
ggplot(aes(x=as_score, y = rand_idx, color = answers)) +
geom_jitter(width = 0.4,
shape = 1,
size  = 3,
stroke = 3,
alpha = 1,
show.legend = F) +
geom_vline(xintercept = c(-1.5, -0.5, 0.5, 1.5)) +
coord_cartesian(xlim = c(-1.5, 1.5)) +
scale_x_continuous(breaks = -1:1,
labels = c('Below average', 'Average', 'Above Average')) +
scale_colour_manual(values = c('Below average' ='#44aa99' ,
'Average'       = '#ddcc77',
'Above average' = '#882255')) +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title  = element_blank(),
panel.grid  = element_blank(),
panel.background = element_rect(fill='transparent', color=NA),
plot.background  = element_rect(fill='transparent', color=NA),
axis.text.x=element_text(colour="#fe9f2e", size=18)
)
#| echo: false
#| message: false
#| warning: false
marks_plot
#| echo: false
#| message: false
#| warning: false
marks_2 <- raw_feedback %>%
filter(question == questions[2]) %>%
mutate(total_answers = n(),
answers = factor(answers, levels = c('A+', 'A', 'A-', 'B+', 'B','B-'))) %>%
group_by(answers, total_answers) %>%
summarise(count = n()) %>%
mutate(x_value = case_when(answers == 'A+' ~ 0,
answers == 'A'  ~ 5,
answers == 'A-' ~ 10,
answers == 'B+' ~ 15,
answers == 'B'  ~ 20),
y_value = 0,
proportion = (count / total_answers)*100)
grade_plot <- marks_2 %>%
ggplot(aes(x=x_value, y=y_value)) +
geom_text(aes(label=answers, size = proportion),
colour = '#fe9f2e',
show.legend = F) +
scale_size(range = c(8, 24), guide = F) +
coord_cartesian(xlim = c(-1, 21)) +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title  = element_blank(),
panel.grid  = element_blank(),
panel.background = element_rect(fill='transparent', color=NA),
plot.background  = element_rect(fill='transparent', color=NA))
#| echo: false
#| message: false
#| warning: false
grade_plot
#| echo: false
#| warning: false
#| message: false
appreciation <- raw_feedback %>%
filter(question == questions[3]) %>%
select(answers) %>%
rename(Feedback = answers) %>%
drop_na()
kbl(appreciation) %>%
kable_material(c("hover")) %>%
scroll_box(width = "100%", height = "400px")
improve <- raw_feedback %>%
filter(question == questions[4]) %>%
select(answers) %>%
drop_na()
questions
#| echo: false
#| warning: false
#| message: false
extra <- raw_feedback %>%
filter(question == questions[10]) %>%
select(answers) %>%
drop_na()
View(extra)
names(knitr::knit_engines$get())
#| echo: false
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lat =-38.66237, lng = 175.919387 , zoom = 13) %>%
addMarkers(lat =-38.66237, lng = 175.919387, label = "Waihāhā hut", labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMarkers(lat=-38.699846, lng=175.681653, label = "Starting point", labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addProviderTiles(provider = providers$OpenTopoMap) %>%
addProviderTiles(provider = providers$Stamen.Terrain)
leaflet() %>%
addTiles() %>%
setView(lat =-38.66237, lng = 175.919387 , zoom = 13) %>%
addMarkers(lat =-38.66237, lng = 175.919387, label = "Kinlock", labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMarkers(lat=-38.662731, lng=175.867919, label = "Kawakawa Bay", labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addProviderTiles(provider = providers$OpenTopoMap) %>%
addProviderTiles(provider = providers$Stamen.Terrain)
![An image of the puzzle Where is Wally? set on a beach](img\where_is_wally_intro.jpg)
cd
