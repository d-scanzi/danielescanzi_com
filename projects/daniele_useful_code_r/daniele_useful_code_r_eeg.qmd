---
title: "Daniele's useful R code for EEG data analysis"
---

The idea for this document comes from [Makoto's useful EEGLAB
code](https://sccn.ucsd.edu/wiki/Makoto's_useful_EEGLAB_code). The
intention behind this document is to have a place to store code that I
produce while working on my projects and that I find useful. Besides
being a somewhat unstructured place to save code that I could use in the
future, this document might be helpful for researchers interested in
using R to analyse EEG data.

## From eegUtils to tidy data

[eegUtils](https://craddm.github.io/eegUtils/articles/eegUtils.html) is
an R package developed by Matt Craddock that allows you to analyse EEG
data in R. Currently, I pre-process data in Matlab with
[EEGLAB](https://eeglab.org/). Thus, I use `eegUtils` to load
pre-processed and epoched data in R to conduct statistical analysis.
Although `eegUils` is a handy package, and I love that I can easily use
R to do EEG data analysis and plot scalp topographies, some aspects of
this package do not align with my preferences. Specifically:

-   The voltage data is stored in wide format, with one column for each
    electrode
-   Time information is stored separately from the EEG signal
    information

Consequently, I find it easier to extract the data I care about
(voltage, electrode names and time values) and store those in a
long-format `tibble`. As I do this often, I wrote a function for this.

*Note that some of the functions you find in the other paragraphs
require the data extracted from `eegUtils` using this function. I
highlighted when this is the case*

```{r}
#| eval: false

tidy_signal_from_eegUtils <- function(eegUtilsDataset) {
  
  tidy_data <- eegUtilsDataset %>% 
  # Add time column
  dplyr::mutate(time = signal[["timings"]][["time"]]) %>% 
  # Reorganise the dataset 
  dplyr::pivot_longer(cols      = !time,
               names_to  = "electrode",
               values_to = "volt") 
  
  return(tidy_data)
  }

```

## Computing ERP amplitudes

The following code presupposes that the EEG data is stored in a
`dataframe` or `tibble` in long format. The dataset must contain three
columns:

-   *time*: time in ms for each sample
-   *electrode*: electrode name
-   *volt*: the voltage value for each sample

To create such a dataset from a file loaded through
[eegUtils](https://craddm.github.io/eegUtils/articles/eegUtils.html) see
working with eegUtils.

There are two common ways to compute an ERP amplitude: average amplitude
and peak amplitude. Average amplitude involves averaging the microvolts
of a signal over a specified time range (where the ERP is expected). The
peak amplitude consists in finding the maximum value of a peak or the
minimum value of a trough. Peaks and troughs are the ERPs. Remember that
peak amplitudes have drawbacks, and the average amplitude should be
preferred.

Here are some functions to compute both values. I also provide a wrapper
function that extract both average and peak amplitudes.

### Extracting time bins

For flexibility, we need a function to select the signal within a
specific time bin. We will use this function to allow the user to define
the time range where to extract the average and peak values.

```{r}
#| eval: false

# Function to extract the signal in a defined time bin. The time bin 
# can be specified as:
#     - c(min, max): with the minimum and max time in ms
#     - max: only the maximum value in ms
extract_bin_signal <- function(eegDataset, bin = NULL) {
    # Time bin must be provided
    if (is.null(bin)) {
        stop("Time bin is missing.")
    }
    # If min and max provided
    if (length(bin == 2)) {
        binned <- eegDataset %>% 
          # Group by electrode, so to extract signal for each electrode independently
          dplyr::group_by(electrode) %>% 
          # Select the requested time range
          dplyr::filter(time >= bin[1] & time <= bin[2]) %>% 
          dplyr::ungroup()
    # If only the max is provided
    } else if (length(bin == 1)) {
        binned <- eegDataset %>%
          # Group by electrode, so to extract signal for each electrode independently
          dplyr::group_by(electrode) %>% 
          # Select the requested time range - from first time point to requested max
          dplyr::filter(time <= bin) %>% 
          dplyr::ungroup()
    # If the time range is not a vector of one or two values throw an error
    } else {
        stop("Bin must be a vector of one or two values")
    }
}
```

### Compute average amplitude

To extract the average amplitude, we can simply compute the mean of the
voltage for each electrode.

```{r}
#| eval: false

# Define a function to find the average amplitude
# Note that this function requires that the dataset contains the electrode and 
# volt columns 
find_average_amplitudes <- function(eegDataset) {
    # compute average amplitude for each electrode
    return(eegDataset %>%
               group_by(electrode) %>% 
               summarise(average_amplitude = mean(volt)) %>% 
               ungroup()
    )
    
}
```

### Compute the peak amplitude

This function is quite complex. The complexity is driven by the fact
that an ERP can be any positive or negative deflection in an EEG signal.
For a positive deflection, we want to find its maximum value. For a
negative deflection, we want to find the minimum value. To do this, we
use the `findpeaks` function of the
[pracma](https://cran.r-project.org/web/packages/pracma/index.html)
package. As this function finds only the local peaks of a signal, to
find the local minima we will multiply the signal by `-1` to invert
peaks and troughs.

Note that this function is quite flexible as the user is able to select
whether to extract only peak, only troughs or both amplitudes.
Importantly, as a signal might have only peaks and not troughs, or vice
versa, if one or the other is not found, an `NA` is produced.

```{r}
#|eval: false

find_peak_amplitudes <- function(eegDataset, peaks = TRUE, valleys = TRUE) {
    
    # Split eeg dataset into list of dataframes, each one containing the signal
    # for one channel
    data_list <- eegDataset %>% 
        dplyr::group_by(electrode) %>% 
        dplyr::group_split()
    
    # Extract only the signal to pass to findpeaks
    data_volt       <- lapply(data_list, function(x) x[["volt"]])
    # Extract the electrode information to use later
    list_electrodes <- sapply(data_list, function(x) x[["electrode"]][[1]])
    # Extract time vectors 
    list_times      <- sapply(data_list, function(x) x[["time"]]) 
    
    
    ## If both peaks and valleys are requested
    if (peaks & valleys) {
        
        # Find peak amplitudes, peak_idx, [start:stop]
        peaks_info   <- sapply(data_volt, pracma::findpeaks, npeaks = 1)
        # Find valleys ampl, peak_idx, [start:stop] - Here we use the function
        # findpeaks as above. Thus, we need to invert the signal so that valleys
        # become peaks and will be detected. Because of this, later we will 
        # invert the sign of the signal to revert to the original value
        valleys_info <- sapply(lapply(data_volt, function(x) x*-1), pracma::findpeaks, npeaks = 1)
        
        # NOTE: peaks_info and valleys_info work well when the signal has peaks
        # and valleys. However, as soon as a signal does not have one of those,
        # then `findpeaks` returns NULL and `sapply` fails to produce a matrix and 
        # defaults to a list. This, in turn, produce an error in extracting the 
        # peak times. As a NULL list as no dimension, when we call 
        # `[[peaks_info[[2, x]]` (see later), we get an error. To avoid this, we
        # capture any NULL list, convert it into a matrix of [1 x 4] NA, and 
        # convert this into what sapply would produce (i.e. a matrix). The size
        # of the matrix reflect the output of findpeaks when a peak is found.
        
        # If sapply produced a list - thus we have NULL nested lists
        if (is.list(peaks_info)) { 
            # Change all NULL to a [1x4] matrix - the dimension follows what would
            # be the output of `findpeaks`
            peaks_info_no_null <- lapply(peaks_info, 
                                         function(x) if(is.null(x)) matrix(rep(NA_real_, 4), nrow = 1) else x)
            # Matrix the results through sapply
            peaks_info <- sapply(peaks_info_no_null, function(x) x)
        }
        
        # Repeat the same with valleys_info
        if (is.list(valleys_info)) { 
            # Change all NULL to a [1x4] matrix - the dimension follows what would
            # be the output of `findpeaks`
            valleys_info_no_null <- lapply(valleys_info, 
                                         function(x) if(is.null(x)) matrix(rep(NA_real_, 4), nrow = 1) else x)
            # Matrix the results through sapply
            valleys_info <- sapply(valleys_info_no_null, function(x) x)
        }
        
        # Extract peak times
        peaks_time   <- sapply(1:ncol(list_times), 
                               function(x) if(is.na(peaks_info[[2, x]])) NA_real_ else list_times[[peaks_info[[2, x]], x]])
        valleys_time <- sapply(1:ncol(list_times), 
                               function(x) if(is.na(valleys_info[[2, x]])) NA_real_ else list_times[[valleys_info[[2, x]], x]])
        
        # Store the results in a handy tibble
        peaks_amplitudes <- as_tibble(cbind(
            "electrode"  = list_electrodes,
            "peak"        = peaks_info[1, ],
            "valley"      = -valleys_info[1, ], # Revert the sign for the valleys
            "peak_time"   = peaks_time,
            "valley_time" = valleys_time
            )
        )
    # If only peaks are requested
    } else if (peaks & !valleys) {
      # Find peaks ampl, peak_idx, [start:stop]
        peaks_info   <- sapply(data_volt, pracma::findpeaks, npeaks = 1)
        
        # If sapply produced a list - thus we have NULL nested lists
        if (is.list(peaks_info)) { 
            # Change all NULL to a [1x4] matrix - the dimension follows what would
            # be the output of `findpeaks`
            peaks_info_no_null <- lapply(peaks_info, 
                                         function(x) if(is.null(x)) matrix(rep(NA_real_, 4), nrow = 1) else x)
            # Matrix the results through sapply
            peaks_info <- sapply(peaks_info_no_null, function(x) x)
        }
        
        # Extract times
        peaks_time   <- sapply(1:ncol(list_times), 
                               function(x) if(is.na(peaks_info[[2, x]])) NA_real_ else list_times[[peaks_info[[2, x]], x]])
        # Store the results in a handy tibble
        peaks_amplitudes <- as_tibble(cbind(
            "electrode"  = list_electrodes,
            "peak"        = peaks_info[1, ],
            "peak_time"   = peaks_time
            )
        )
    # If only troughs are requested
    } else if (!peaks & valleys) {
        # Find valleys ampl, peak_idx, [start:stop] - Here we use the function
        # findpeaks as above. Thus, we need to invert the signal so that valleys
        # become peaks and will be detected. Because of this, later we will 
        # invert the sign of signal to revert to the original value
        valleys_info <- sapply(lapply(data_volt, function(x) x*-1), pracma::findpeaks, npeaks = 1)
        
        # Repeat the same with valleys_info
        if (is.list(valleys_info)) { 
            # Change all NULL to a [1x4] matrix - the dimension follows what would
            # be the output of `findpeaks`
            valleys_info_no_null <- lapply(valleys_info, 
                                         function(x) if(is.null(x)) matrix(rep(NA_real_, 4), nrow = 1) else x)
            # Matrix the results through sapply
            valleys_info <- sapply(valleys_info_no_null, function(x) x)
        }
        
        # Extract times
        valleys_time <- sapply(1:ncol(list_times), 
                               function(x) if(is.na(valleys_info[[2, x]])) NA_real_ else list_times[[valleys_info[[2, x]], x]])
        # Store the results in a handy tibble
        peaks_amplitudes <- as_tibble(cbind(
            "electrode"  = list_electrodes,
            "valley"      = -valleys_info[1, ], # Revert the sign for the valleys
            "valley_time" = valleys_time
            )
        )
    # if peaks and valleys argument are set both to FALSE
    } else {
        stop("At least one argument between 'peaks' and 'valleys' must be TRUE")
    }
    
    # Return the result tibble
    return(peaks_amplitudes)
    
}

```

### Wrapper function for ERP amplitudes

The above functions can be used separately. However, it could be handy
to have a wrapper function that allows the user to compute both peak and
average amplitudes simultaneously. Again, the following function is
highly flexible, allowing the user to:

-   Define a time bin where to compute the amplitude measures. If no bin
    is provided, the whole signal is used
-   Selecting whether to extract the only peak, only troughs, only
    averages amplitude or any combination of those

```{r}
#| eval: false

# We then put all together in a single function
find_erp_amplitudes <- function(eegDataset, bin = NULL, peaks = TRUE, valleys = TRUE, avg = TRUE) {
    
    # If a time bin is provided, call extract_bin_signal (see above) to extract 
    # only the signal wirthin the requested time range
    if (!is.null(bin)) {
        # Extract the signal in the defined bin
        binned_signal <- extract_bin_signal(eegDataset, bin = bin)
    # If no time bin is provided, use the whole signal
    } else {
        binned_signal <- eegDataset
    }
    
    # If peaks, troughs and average amplitude are requested
    if ((peaks | valleys) & avg) {
        # Extract peak and average amplitudes
        peak_amps     <- find_peak_amplitudes(binned_signal, peaks = peaks, valleys = valleys)
        avrg_amps     <- find_average_amplitudes(binned_signal)
    
        amplitudes    <- merge(peak_amps, avrg_amps)
    # If only peak and troughs amplitudes are requested
    } else if ((peaks | valleys) & !avg) {
        amplitudes <- find_peak_amplitudes(binned_signal, peaks = peaks, valleys = valleys)
    # If only troughs and average amplitude are requested
    } else if (!(peaks | valleys) & avg) {
        amplitudes <- find_average_amplitudes(binned_signal)
    # If every amplitude argument is set to FALSE
    } else {
        stop("You need to provide at least one argument between peaks, valleys or avg")
    }

    return(amplitudes)
}
```
